# Converts pose + hands landmarks to a render data vector.

type: "HolisticTrackingToRenderDataNoFace"

# Image size. (std::pair<int, int>)
input_stream: "IMAGE_SIZE:image_size"
# Pose landmarks. (NormalizedLandmarkList)
input_stream: "POSE_LANDMARKS:landmarks"
# Region of interest calculated based on pose landmarks. (NormalizedRect)
input_stream: "POSE_ROI:roi"
# Left hand landmarks. (NormalizedLandmarkList)
input_stream: "LEFT_HAND_LANDMARKS:left_hand_landmarks"
# Right hand landmarks. (NormalizedLandmarkList)
input_stream: "RIGHT_HAND_LANDMARKS:right_hand_landmarks"

# Whether to render the full set of pose landmarks, or only those on the
# upper body. If unspecified, functions as set to false. (bool)
input_side_packet: "UPPER_BODY_ONLY:upper_body_only"

# Render data vector. (std::vector<RenderData>)
output_stream: "RENDER_DATA_VECTOR:render_data_vector"

# --------------------------------------------------------------------------- #
# ------------------ Calculates scale for render objects -------------------- #
# --------------------------------------------------------------------------- #

# Calculates rendering scale based on the pose bounding box.
node {
  calculator: "RectToRenderScaleCalculator"
  input_stream: "NORM_RECT:roi"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "RENDER_SCALE:render_scale"
  node_options: {
    [type.googleapis.com/mediapipe.RectToRenderScaleCalculatorOptions] {
      multiplier: 0.0008
    }
  }
}

# --------------------------------------------------------------------------- #
# --------------- Combines pose and hands into pose skeleton ---------------- #
# --------------------------------------------------------------------------- #

# Gets pose landmarks before wrists.
node {
  calculator: "SplitNormalizedLandmarkListCalculator"
  input_stream: "landmarks"
  output_stream: "landmarks_before_wrist"
  node_options: {
    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
      ranges: { begin: 0 end: 15 }
    }
  }
}

# Gets pose left wrist landmark.
node {
  calculator: "SplitNormalizedLandmarkListCalculator"
  input_stream: "landmarks"
  output_stream: "landmarks_left_wrist"
  node_options: {
    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
      ranges: { begin: 15 end: 16 }
    }
  }
}

# Gets pose right wrist landmark.
node {
  calculator: "SplitNormalizedLandmarkListCalculator"
  input_stream: "landmarks"
  output_stream: "landmarks_right_wrist"
  node_options: {
    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
      ranges: { begin: 16 end: 17 }
    }
  }
}

# Gets pose landmarks after wrists.
node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:upper_body_only"
  input_stream: "landmarks"
  output_stream: "landmarks_after_wrist"
  node_options: {
    [type.googleapis.com/mediapipe.SwitchContainerOptions] {
      contained_node: {
        calculator: "SplitNormalizedLandmarkListCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
            ranges: { begin: 23 end: 33 }
          }
        }
      }
      contained_node: {
        calculator: "SplitNormalizedLandmarkListCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
            ranges: { begin: 23 end: 25 }
          }
        }
      }
    }
  }
}

# Gets left hand wrist landmark.
node {
  calculator: "HandWristForPose"
  input_stream: "HAND_LANDMARKS:left_hand_landmarks"
  output_stream: "WRIST_LANDMARK:left_hand_wrist_landmark"
}

# Gets left hand wrist landmark or keep pose wrist landmark if hand was not
# predicted.
node {
  calculator: "MergeCalculator"
  input_stream: "left_hand_wrist_landmark"
  input_stream: "landmarks_left_wrist"
  output_stream: "merged_left_hand_wrist_landmark"
}

# Gets right hand wrist landmark.
node {
  calculator: "HandWristForPose"
  input_stream: "HAND_LANDMARKS:right_hand_landmarks"
  output_stream: "WRIST_LANDMARK:right_hand_wrist_landmark"
}

# Gets right hand wrist landmark or keep pose wrist landmark if hand was not
# predicted.
node {
  calculator: "MergeCalculator"
  input_stream: "right_hand_wrist_landmark"
  input_stream: "landmarks_right_wrist"
  output_stream: "merged_right_hand_wrist_landmark"
}

# Combines pose landmarks all together.
node {
  calculator: "ConcatenateNormalizedLandmarkListCalculator"
  input_stream: "landmarks_before_wrist"
  input_stream: "merged_left_hand_wrist_landmark"
  input_stream: "merged_right_hand_wrist_landmark"
  input_stream: "landmarks_after_wrist"
  output_stream: "landmarks_merged"
  node_options: {
    [type.googleapis.com/mediapipe.ConcatenateVectorCalculatorOptions] {
      only_emit_if_all_present: true
    }
  }
}

# Takes left pose landmarks.
node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:upper_body_only"
  input_stream: "landmarks_merged"
  output_stream: "landmarks_left_side"
  node_options: {
    [type.googleapis.com/mediapipe.SwitchContainerOptions] {
      contained_node: {
        calculator: "SplitNormalizedLandmarkListCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
            ranges: { begin: 11 end: 12 }
            ranges: { begin: 13 end: 14 }
            ranges: { begin: 15 end: 16 }
            ranges: { begin: 17 end: 18 }
            ranges: { begin: 19 end: 20 }
            ranges: { begin: 21 end: 22 }
            ranges: { begin: 23 end: 24 }
            ranges: { begin: 25 end: 26 }
            combine_outputs: true
          }
        }
      }
      contained_node: {
        calculator: "SplitNormalizedLandmarkListCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
            ranges: { begin: 11 end: 12 }
            ranges: { begin: 13 end: 14 }
            ranges: { begin: 15 end: 16 }
            ranges: { begin: 17 end: 18 }
            combine_outputs: true
          }
        }
      }
    }
  }
}

# Takes right pose landmarks.
node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:upper_body_only"
  input_stream: "landmarks_merged"
  output_stream: "landmarks_right_side"
  node_options: {
    [type.googleapis.com/mediapipe.SwitchContainerOptions] {
      contained_node: {
        calculator: "SplitNormalizedLandmarkListCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
            ranges: { begin: 12 end: 13 }
            ranges: { begin: 14 end: 15 }
            ranges: { begin: 16 end: 17 }
            ranges: { begin: 18 end: 19 }
            ranges: { begin: 20 end: 21 }
            ranges: { begin: 22 end: 23 }
            ranges: { begin: 24 end: 25 }
            ranges: { begin: 26 end: 27 }
            combine_outputs: true
          }
        }
      }
      contained_node: {
        calculator: "SplitNormalizedLandmarkListCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
            ranges: { begin: 12 end: 13 }
            ranges: { begin: 14 end: 15 }
            ranges: { begin: 16 end: 17 }
            ranges: { begin: 18 end: 19 }
            combine_outputs: true
          }
        }
      }
    }
  }
}

# --------------------------------------------------------------------------- #
# ---------------------------------- Pose ----------------------------------- #
# --------------------------------------------------------------------------- #

# Converts pose connections to white lines.
node {
  calculator: "SwitchContainer"
  input_side_packet: "ENABLE:upper_body_only"
  input_stream: "NORM_LANDMARKS:landmarks_merged"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:landmarks_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.SwitchContainerOptions] {
      contained_node: {
        calculator: "LandmarksToRenderDataCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
            landmark_connections: 11
            landmark_connections: 12
            landmark_connections: 11
            landmark_connections: 13
            landmark_connections: 13
            landmark_connections: 15
            landmark_connections: 12
            landmark_connections: 14
            landmark_connections: 14
            landmark_connections: 16
            landmark_connections: 11
            landmark_connections: 17
            landmark_connections: 12
            landmark_connections: 18
            landmark_connections: 17
            landmark_connections: 18
            landmark_connections: 17
            landmark_connections: 19
            landmark_connections: 18
            landmark_connections: 20
            landmark_connections: 19
            landmark_connections: 21
            landmark_connections: 20
            landmark_connections: 22
            landmark_connections: 21
            landmark_connections: 23
            landmark_connections: 22
            landmark_connections: 24
            landmark_connections: 23
            landmark_connections: 25
            landmark_connections: 24
            landmark_connections: 26
            landmark_connections: 21
            landmark_connections: 25
            landmark_connections: 22
            landmark_connections: 26

            landmark_color { r: 255 g: 255 b: 255 }
            connection_color { r: 255 g: 255 b: 255 }
            thickness: 3.0
            visualize_landmark_depth: false
            utilize_visibility: true
            visibility_threshold: 0.1
          }
        }
      }
      contained_node: {
        calculator: "LandmarksToRenderDataCalculator"
        node_options: {
          [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
            landmark_connections: 11
            landmark_connections: 12
            landmark_connections: 11
            landmark_connections: 13
            landmark_connections: 13
            landmark_connections: 15
            landmark_connections: 12
            landmark_connections: 14
            landmark_connections: 14
            landmark_connections: 16
            landmark_connections: 11
            landmark_connections: 17
            landmark_connections: 12
            landmark_connections: 18
            landmark_connections: 17
            landmark_connections: 18
            landmark_color { r: 255 g: 255 b: 255 }
            connection_color { r: 255 g: 255 b: 255 }
            thickness: 3.0
            visualize_landmark_depth: false
            utilize_visibility: true
            visibility_threshold: 0.5
          }
        }
      }
    }
  }
}

# Converts pose joints to big white circles.
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:landmarks_merged"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:landmarks_background_joints_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 255 g: 255 b: 255 }
      connection_color { r: 255 g: 255 b: 255 }
      thickness: 5.0
      visualize_landmark_depth: false
      utilize_visibility: true
      visibility_threshold: 0.5
    }
  }
}

# Converts pose left side joints to orange circles (inside white ones).
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:landmarks_left_side"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:landmarks_left_joints_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 255 g: 138 b: 0 }
      connection_color { r: 255 g: 138 b: 0 }
      thickness: 3.0
      visualize_landmark_depth: false
      utilize_visibility: true
      visibility_threshold: 0.5
    }
  }
}

# Converts pose right side joints to cyan circles (inside white ones).
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:landmarks_right_side"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:landmarks_right_joints_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 0 g: 217 b: 231 }
      connection_color { r: 0 g: 217 b: 231 }
      thickness: 3.0
      visualize_landmark_depth: false
      utilize_visibility: true
      visibility_threshold: 0.5
    }
  }
}

# --------------------------------------------------------------------------- #
# ------------------------------- Left hand --------------------------------- #
# --------------------------------------------------------------------------- #

# Converts left hand connections to white lines.
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:left_hand_landmarks"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:left_hand_landmarks_connections_rd"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_connections: 0
      landmark_connections: 1
      landmark_connections: 1
      landmark_connections: 2
      landmark_connections: 2
      landmark_connections: 3
      landmark_connections: 3
      landmark_connections: 4
      landmark_connections: 0
      landmark_connections: 5
      landmark_connections: 5
      landmark_connections: 6
      landmark_connections: 6
      landmark_connections: 7
      landmark_connections: 7
      landmark_connections: 8
      landmark_connections: 5
      landmark_connections: 9
      landmark_connections: 9
      landmark_connections: 10
      landmark_connections: 10
      landmark_connections: 11
      landmark_connections: 11
      landmark_connections: 12
      landmark_connections: 9
      landmark_connections: 13
      landmark_connections: 13
      landmark_connections: 14
      landmark_connections: 14
      landmark_connections: 15
      landmark_connections: 15
      landmark_connections: 16
      landmark_connections: 13
      landmark_connections: 17
      landmark_connections: 0
      landmark_connections: 17
      landmark_connections: 17
      landmark_connections: 18
      landmark_connections: 18
      landmark_connections: 19
      landmark_connections: 19
      landmark_connections: 20
      landmark_color { r: 255 g: 255 b: 255 }
      connection_color { r: 255 g: 255 b: 255 }
      thickness: 4.0
      visualize_landmark_depth: false
    }
  }
}

# Converts left hand color joints.
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:left_hand_landmarks"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:left_hand_landmarks_joints_rd"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 255 g: 138 b: 0 }
      connection_color { r: 255 g: 138 b: 0 }
      thickness: 3.0
      visualize_landmark_depth: false
    }
  }
}

# --------------------------------------------------------------------------- #
# -------------------------------- Right hand ------------------------------- #
# --------------------------------------------------------------------------- #

# Converts right hand connections to white lines.
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:right_hand_landmarks"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:right_hand_landmarks_connections_rd"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_connections: 0
      landmark_connections: 1
      landmark_connections: 1
      landmark_connections: 2
      landmark_connections: 2
      landmark_connections: 3
      landmark_connections: 3
      landmark_connections: 4
      landmark_connections: 0
      landmark_connections: 5
      landmark_connections: 5
      landmark_connections: 6
      landmark_connections: 6
      landmark_connections: 7
      landmark_connections: 7
      landmark_connections: 8
      landmark_connections: 5
      landmark_connections: 9
      landmark_connections: 9
      landmark_connections: 10
      landmark_connections: 10
      landmark_connections: 11
      landmark_connections: 11
      landmark_connections: 12
      landmark_connections: 9
      landmark_connections: 13
      landmark_connections: 13
      landmark_connections: 14
      landmark_connections: 14
      landmark_connections: 15
      landmark_connections: 15
      landmark_connections: 16
      landmark_connections: 13
      landmark_connections: 17
      landmark_connections: 0
      landmark_connections: 17
      landmark_connections: 17
      landmark_connections: 18
      landmark_connections: 18
      landmark_connections: 19
      landmark_connections: 19
      landmark_connections: 20
      landmark_color { r: 255 g: 255 b: 255 }
      connection_color { r: 255 g: 255 b: 255 }
      thickness: 4.0
      visualize_landmark_depth: false
    }
  }
}

# Converts right hand color joints.
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:right_hand_landmarks"
  input_stream: "RENDER_SCALE:render_scale"
  output_stream: "RENDER_DATA:right_hand_landmarks_joints_rd"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      landmark_color { r: 0 g: 217 b: 231 }
      connection_color { r: 0 g: 217 b: 231 }
      thickness: 3.0
      visualize_landmark_depth: false
    }
  }
}

# Concatenates all render data.
node {
  calculator: "ConcatenateRenderDataVectorCalculator"
  input_stream: "landmarks_render_data"
  input_stream: "landmarks_background_joints_render_data"
  input_stream: "landmarks_left_joints_render_data"
  input_stream: "landmarks_right_joints_render_data"

  # Left hand.
  input_stream: "left_hand_landmarks_connections_rd"
  input_stream: "left_hand_landmarks_joints_rd"

  # Right hand.
  input_stream: "right_hand_landmarks_connections_rd"
  input_stream: "right_hand_landmarks_joints_rd"

  output_stream: "render_data_vector"
}
